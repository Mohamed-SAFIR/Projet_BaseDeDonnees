-- QUESTION 1--
SELECT *FROM SERIES;

-- QUESTION 2--
SELECT COUNT(DISTINCT PAYS)AS NB_PAYS FROM SERIES;

-- QUESTION 3 --
SELECT TITRES FROM SERIES WHERE PAYS='JAPON' ORDER BY TITRES;

-- QUESTION 4 --
SELECT PAYS,COUNT(TITRES)AS NB_SERIES FROM SERIES GROUP BY PAYS;

-- QUESTION 5--
SELECT COUNT(DISTINCT TITRES)AS NB_SERIES FROM CREER WHERE DATE_CREAT BETWEEN '01/01/2001' AND '31/12/2015';

-- QUESTION 6 --
SELECT TITRES,ANNEE FROM TYPE WHERE NOMG='COMEDIE'
INTERSECT
SELECT TITRES,ANNEE FROM TYPE WHERE NOMG='SCIENCE FICTION';

-- QUESTION 7 --
SELECT TITRES,ANNEE FROM PRODUIRE WHERE NOM='SPIELBERG' ORDER BY ANNEE DESC;

-- QUESTION 8 --
SELECT DISTINCT TITRES,NB_SAIS FROM SERIES JOIN SAISONS USING(TITRES) WHERE PAYS='USA' ORDER BY NB_SAIS;

-- QUESTION 9 --
SELECT TITRES,COUNT(NB_EPIS)AS NB_EPIS FROM SERIES JOIN SAISONS USING(TITRES) JOIN EPISODES USING(ID_SAIS) GROUP BY TITRES HAVING COUNT(NB_EPIS) >= ALL(SELECT COUNT(NB_EPIS) FROM SERIES JOIN SAISONS USING(TITRES) JOIN EPISODES USING(ID_SAIS) GROUP BY TITRES);

-- QUESTION 10 --
SELECT SEXE,AVG(NOTE)AS NOTE_MOYENNE FROM NOTER_SER NATURAL JOIN UTILISATEURS GROUP BY SEXE HAVING AVG(NOTE) >= ALL(SELECT AVG(NOTE) FROM NOTER_SER NATURAL JOIN UTILISATEURS GROUP BY SEXE) ;

-- QUESTION 11 --
SELECT TITRES,AVG(NOTE)AS NOTE FROM NOTER_SER GROUP BY TITRES HAVING AVG(NOTE) < 5 ORDER BY 2;

-- QUESTION 12 --
SELECT TITRES,MAX(NOTE),COMMENTAIRE FROM NOTER_SER GROUP BY TITRES,COMMENTAIRE;

-- QUESTION 13 --
SELECT TITRES,AVG(NOTE)AS NOTE_MOYENNE FROM NOTER_SER NATURAL JOIN EPISODES NATURAL JOIN SAISONS GROUP BY TITRES HAVING AVG(NOTE) > 8;

-- QUESTION 14 --
SELECT TITRES,COUNT(*)AS NB_EPISODE FROM JOUER NATURAL JOIN EPISODES NATURAL JOIN SAISONS WHERE PRENOM='BRAYAN' AND NOM ='CRANSTON' GROUP BY TITRES;

-- QUESTION 15 --
SELECT TITRES,TITREE,NOM,PRENOM FROM JOUER NATURAL JOIN EPISODES NATURAL JOIN SAISONS GROUP BY TITRES,TITREE,NOM,PRENOM ORDER BY TITRES,TITREE;

-- QUESTION 16 --



-- QUESTION 17 --
SELECT NOM,PRENOM,COUNT(*)AS NB_JOUER FROM JOUER NATURAL JOIN EPISODES NATURAL JOIN SAISONS WHERE TITRES='BREAKING BAD' GROUP BY NOM,PRENOM HAVING COUNT(*) = ALL(SELECT SUM(NB_EPIS) FROM SAISONS WHERE TITRES='BREAKING BAD');

-- QUESTION 18 --
SELECT TITRES,PSEUDO FROM NOTER_SER GROUP BY PSEUDO,TITRES ORDER BY TITRES;
